Fractional Knapsack using Greedy Algorithm:

#include <stdio.h>
#include <stdlib.h>

// Structure to represent an item
struct Item {
    int weight;
    int value;
};

// Function to compare items based on their value-to-weight ratio
int compare(const void *a, const void *b) {
    double ratio1 = ((struct Item *)a)->value / (double)((struct Item *)a)->weight;
    double ratio2 = ((struct Item *)b)->value / (double)((struct Item *)b)->weight;
    return (ratio2 > ratio1) ? 1 : -1;
}

// Function to solve Fractional Knapsack using Greedy Algorithm
double fractionalKnapsack(struct Item items[], int n, int capacity) {
    // Sort items based on value-to-weight ratio in descending order
    qsort(items, n, sizeof(items[0]), compare);

    double totalValue = 0.0; // Total value of items included in the knapsack
    int currentWeight = 0;  // Current weight in the knapsack

    // Iterate through sorted items
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            // Include the whole item if it can fit in the knapsack
            currentWeight += items[i].weight;
            totalValue += items[i].value;
        } else {
            // Include a fraction of the item if it can't fit entirely
            int remainingWeight = capacity - currentWeight;
            totalValue += (items[i].value / (double)items[i].weight) * remainingWeight;
            break; // Knapsack is full
        }
    }
    return totalValue;
}

int main() {
    int n, capacity;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);

    struct Item items[n];

    printf("Enter the weight and value of each item:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &items[i].weight, &items[i].value);
    }

    double maxTotalValue = fractionalKnapsack(items, n, capacity);
    printf("Maximum total value in the knapsack: %.2lf\n", maxTotalValue);

    return 0;
}
